import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.orangeA200,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onError,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onError,
          fontSize: 14.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 10.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 34.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: 32.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onError,
          fontSize: 28.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blue800,
          fontSize: 24.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: 20.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 14.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFDAE0F6),
    primaryContainer: Color(0XFF424242),
    secondary: Color(0XFF424242),
    secondaryContainer: Color(0XFFDAE0F5),
    tertiary: Color(0XFF424242),
    tertiaryContainer: Color(0XFFDAE0F5),

    // Background colors
    background: Color(0XFF424242),

    // Surface colors
    surface: Color(0XFF424242),
    surfaceTint: Color(0XFF292D32),
    surfaceVariant: Color(0XFFDAE0F5),

    // Error colors
    error: Color(0XFF292D32),
    errorContainer: Color(0XFF9BA5B1),
    onError: Color(0XFF000000),
    onErrorContainer: Color(0X89021864),

    // On colors(text colors)
    onBackground: Color(0XFFFFFFFF),
    onInverseSurface: Color(0XFF000000),
    onPrimary: Color(0XFF292D32),
    onPrimaryContainer: Color(0XFFFFFFFF),
    onSecondary: Color(0XFFFFFFFF),
    onSecondaryContainer: Color(0XFF292D32),
    onTertiary: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0XFF292D32),

    // Other colors
    outline: Color(0XFF292D32),
    outlineVariant: Color(0XFF424242),
    scrim: Color(0XFF424242),
    shadow: Color(0XFF292D32),

    // Inverse colors
    inversePrimary: Color(0XFF424242),
    inverseSurface: Color(0XFF292D32),

    // Pending colors
    onSurface: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0XFF292D32),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);

  // Blue
  Color get blue800 => Color(0XFF2E6AB7);
  Color get blue90087 => Color(0X870E2EA0);

  // BlueGray
  Color get blueGray100 => Color(0XFFD7D7D7);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blueGray900 => Color(0XFF333333);

  // Gray
  Color get gray100 => Color(0XFFF7F3F3);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFFFFAFA);
  Color get gray500 => Color(0XFF928D8D);
  Color get gray5001 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF6F6F6F);
  Color get gray900 => Color(0XFF231F20);
  Color get gray90001 => Color(0XFF212121);

  // Green
  Color get green500 => Color(0XFF48B953);
  Color get green600 => Color(0XFF32AD4D);

  // Indigo
  Color get indigo40093 => Color(0X93556CC0);
  Color get indigo800 => Color(0XFF2B3E81);
  Color get indigo80001 => Color(0XFF274974);
  Color get indigo90075 => Color(0X7504045F);
  Color get indigo90087 => Color(0X87092277);
  Color get indigo90093 => Color(0X93021763);

  // Orange
  Color get orange100 => Color(0XFFF9DDBD);
  Color get orange300 => Color(0XFFF7BF50);
  Color get orangeA200 => Color(0XFFFF9950);

  // Red
  Color get redA700 => Color(0XFFFF0808);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
